package com.kodbook.exception.global;

import com.kodbook.dto.ErrorDto;
import com.kodbook.dto.response.ErrorDetails;
import com.kodbook.dto.response.ErrorResponse;
import com.kodbook.dto.response.ValidationErrorResponse;
import com.kodbook.exception.custom.IncorrectPasswordException;
import com.kodbook.exception.custom.InvalidOtpException;
import com.kodbook.exception.custom.SamePasswordException;
import com.kodbook.exception.custom.UsernameNotFoundException;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class GlobalApiExceptionHandler {
    @ExceptionHandler(exception = UsernameNotFoundException.class)
    public ResponseEntity<ErrorResponse> handleUsernameNotFoundException(UsernameNotFoundException e, HttpServletRequest request) {
        ErrorResponse errorResponse = new ErrorResponse(HttpStatus.NOT_FOUND.value(),
                HttpStatus.NOT_FOUND.getReasonPhrase(), e.getMessage(), request.getRequestURI());
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);
    }

    @ExceptionHandler(exception = InvalidOtpException.class)
    public ResponseEntity<ErrorResponse> handleInvalidOtpException(InvalidOtpException e, HttpServletRequest request) {
        ErrorResponse errorResponse = new ErrorResponse(HttpStatus.BAD_REQUEST.value(),
                HttpStatus.BAD_REQUEST.getReasonPhrase(), e.getMessage(), request.getRequestURI());
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
    }

    @ExceptionHandler(exception = IncorrectPasswordException.class)
    public ResponseEntity<ErrorDto> handleIncorrectPasswordException(IncorrectPasswordException exception) {
        ErrorDto errorDto = new ErrorDto();
        errorDto.setCode(HttpStatus.BAD_REQUEST.value());
        errorDto.setMessage(exception.getMessage());
        errorDto.setReason(HttpStatus.BAD_REQUEST.getReasonPhrase());
        return new ResponseEntity<>(errorDto, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(exception = SamePasswordException.class)
    public ResponseEntity<ErrorDto> handleSamePasswordException(SamePasswordException exception) {
        ErrorDto errorDto = new ErrorDto(exception.getMessage(), HttpStatus.BAD_REQUEST.value(),
                HttpStatus.BAD_REQUEST.getReasonPhrase());
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorDto);
    }

    @ExceptionHandler(exception = MethodArgumentNotValidException.class)
    public ResponseEntity<ValidationErrorResponse> handleValidationException(MethodArgumentNotValidException exception) {
        ValidationErrorResponse validationErrorResponse = new ValidationErrorResponse();
        ErrorDetails errorDetails = new ErrorDetails();
        exception.getBindingResult().getFieldErrors().forEach(
                fieldError -> {
                    errorDetails.setField(fieldError.getField());
                    errorDetails.setMessage(fieldError.getDefaultMessage());
                }
        );
        validationErrorResponse.setErrors();
        validationErrorResponse.setSuccess(false);
        validationErrorResponse.setMessage("Validation Error");


        return ResponseEntity.badRequest().body(validationErrorResponse);
    }
}
